Exercise 6.1: What is the difference between a parameter and an
argument?

	Parameters are the types required to call a function. Arguments initialize the parameters
	of a function.


Exercise 6.4: Write a function that interacts with the user, asking for a
number and generating the factorial of that number. Call this function from
main.

	#include <iostream>
	#include <string>
	#include <sstream>
	using namespace std;

	int fact(int num) {
		int ret = 1;
		while (num >= 0) {
			ret *= num--;
		}

		return ret;
	}

	int main() {
		string in = "";
		int num = 0;

		while (true) {
			cout << "Enter an integral number to factorial" << endl;
			getLine(cin,in);
		
			stringstream myStream(in);
			if (in >> num) break;

			cout << "Invalid number" << endl;
		}
		num = fact(num);
	}


Exercise 6.5: Write a function to return the absolute value of its argument.

	Provided in the <math> library as double abs (T x);
	otherwise, for each type: return (num >= 0) num : -num;

Exercise 6.6: Explain the differences between a parameter, a local variable,
and a local static variable. Give an example of a function in which each
might be useful.

	Parameter: destroyed when out of scope. They are automatic objects, if they correspond
		to a local variable if thir definition contains an initializer. Default initalized
		local variables of built-in type have undefined values.
	Local variable: A variable created in the function's control block whose lifetime
		ends when the function is terminated.
	Local static variable: A variable created in the function's control block whose lifetime
		ends when the program is terminated.

	Parameters are useful when your function's logic is dependent on a runtime value.
	(e.g. squaring a number unknown at compile time)
	Local variables are useful to complete a function's logic AND when its unnnecessary to know
	the values of those objects after execution.
	Static local variables are useful to complete a function's logic AND when it's necessary to know
	the values of those objects throughout the lifetime of the program.

Exercise 6.7: Write a function that returns 0 when it is first called and then
generates numbers in sequence each time it is called again.

	int naturalNumberSequence() {
		static int num = 0:
		return num++;
	}

Exercise 6.8: Write a header file named Chapter6.h that contains
declarations for the functions you wrote for the exercises in Åò 6.1 (p. 205).

	Chapter6.h

	// function prototypes
	int fact(int num);
	double abs(double num);

Exercise 6.10: Using pointers, write a function to swap the values of two
ints. Test the function by calling it and printing the swapped values.

	void swap(int *i, int *j) {
		int copy = *i;
		*i = *j;
		*j = copy;
	}

	int main() {
		int a = 0;
		int b = 0;
		int *i = &a;
		int *j = &b;
		swap(i,j);
	}

Exercise 6.13: Assuming T is the name of a type, explain the difference
between a function declared as void f(T) and void f(T&).

	f(T) is pass-by-value and creates a copy of the argument which is local to the function.
	f(T&) is pass-by-reference which directly references the argument and changes to it changes
	the argument outside of the function.

Exercise 6.14: Give an example of when a parameter should be a reference
type. Give an example of when a parameter should not be a reference.

	Pass by const reference when you have a large object that you don't want to copy.
	Pass by value when the arg doesn't need to be modified and it's not excessively large (copy time could be substantial)


Exercise 6.16: The following function, although legal, is less useful than it
might be. Identify and correct the limitation on this function:
bool is_empty(string& s) { return s.empty(); }

	We can't test the is_empty function on string literals or constant strings because
	you cannot bind a const/literal to the parameter (or else you'd be able to change the
	value of a const object!)

Exercise 6.17: Write a function to determine whether a string contains
any capital letters. Write a function to change a string to all lowercase. Do
the parameters you used in these functions have the same type? If so, why?
If not, why not?

	bool hasCapitals(const string &s) {/* ..... */} 
	void toLower(string &s)

	We want to check both mutable and immutable strings for capitals. We use a reference
	because string could be very large and we don't want to copy it. toLower is intended
	to change the argument so we pass by reference. However, we can not change const/literal
	strings so we do not make it const.

Exercise 6.20: When should reference parameters be references to const?
What happens if we make a parameter a plain reference when it could be a
reference to const?

	Reference parameters should be references to const when the object is unchanged.
	This is useful because we can pass plain references, constants, and literals.
	If we make the parameter a plain reference, we limit ourselves to plain references.
	The implication of this is that we have to do extra work to call these kind of functions
	(e.g. foo1(const string &s) { foo2(s) // error if foo2 isn't const reference)



Best Practices
Reference parameters that are not changed inside a function should be
references to const.

Casts should not be needed to call an overloaded function. The need for a
cast suggests that the parameter sets are designed poorly.

Note
In C++, name lookup happens before type checking.